{"version":3,"sources":["Surah.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Surah","surahNo","setSurahNo","handleSubmit","useState","url","setUrl","ayah","setAyah","surahName","setSurahName","surahEng","setSurahEng","surahTotal","setSurahTotal","useEffect","a","fetch","resp","json","data","console","log","ayahs","name","englishNameTranslation","numberOfAyahs","getAyah","window","scrollTo","className","map","perayah","text","number","type","onClick","srno","App","surahno","setSurahno","appear","setAppear","e","preventDefault","onSubmit","placeholder","value","onChange","target","Number","parseInt","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ba72e91a.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react'\r\n\r\n\r\nconst Surah = ({surahNo,setSurahNo,handleSubmit}) => {\r\n    const [url,setUrl] = useState(`https://api.alquran.cloud/v1/surah/${surahNo}`)\r\n    const [ayah, setAyah] = useState([])\r\n    const [surahName,setSurahName] = useState('')\r\n    // const [surahNo,setSurahNo] = useState(114)\r\n    const [surahEng,setSurahEng] = useState('')\r\n    const [surahTotal,setSurahTotal] = useState('')\r\n\r\n    useEffect(() => {\r\n        getAyah()\r\n        async function getAyah () {\r\n            const resp = await fetch (url) //Here, you fetch the url\r\n            const data = await resp.json() //The data is converted to json\r\n            console.log(data.data.ayahs)\r\n            setAyah(data.data.ayahs)\r\n            setSurahName(data.data.name)\r\n            setSurahEng(data.data.englishNameTranslation)\r\n            setSurahTotal(data.data.numberOfAyahs)\r\n        \r\n        }\r\n        window.scrollTo(0, 0)\r\n    }, [url])\r\n    \r\n    const handleNext = ()=>{\r\n        let srno = surahNo + 1\r\n        \r\n        if (srno <= 114){\r\n            setSurahNo(srno)\r\n            setUrl(`https://api.alquran.cloud/v1/surah/${srno}`)\r\n        }\r\n        else{\r\n            return\r\n        }\r\n        \r\n    }\r\n    const handlePrevious = ()=>{\r\n        let srno = surahNo - 1\r\n        \r\n        if (srno >0){\r\n            setSurahNo(srno)\r\n            setUrl(`https://api.alquran.cloud/v1/surah/${srno}`)\r\n        }\r\n        else{\r\n            return\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container col-md-12 p-1 my-5 bg-dark text-white\">\r\n            <div className=\"text-center\">\r\n                <h1 className=\"h1\">\r\n                    {surahNo}  {surahName}   \r\n                </h1>\r\n                <h2 className=\"h2\">\r\n                    English Translation: {surahEng}\r\n                </h2>\r\n                <h2 className=\"h2\">\r\n                    Total Ayahs: {surahTotal}\r\n                </h2>\r\n            </div>\r\n\r\n            <ol className=\"list-group list-group-numbered w-100 p-3 dir\">\r\n            {ayah.map((perayah) => {\r\n                return (\r\n                    <li className=\"list-group-item\" key={perayah.number}>{perayah.text}</li>\r\n                )\r\n            })}\r\n            </ol>\r\n            <div className=\"col text-center\">\r\n                <button className=\"btn btn-space btn-secondary\" type=\"submit\" onClick={handlePrevious}>Previous</button>\r\n                <button className=\"btn btn-space btn-primary\" type=\"submit\" onClick={handleSubmit}>Home</button>\r\n                <button className=\"btn btn-space btn-secondary\" type=\"submit\" onClick={handleNext}>Next</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Surah\r\n","import React, {useState} from 'react'\nimport Surah from './Surah'\nimport './App.css'\n\n\nfunction App() {\n  const [surahno, setSurahno] = useState('')\n  const [appear,setAppear] = useState(true)\n\n  const handleChange = (e) => {\n        let srno = e.target.value\n\n        if (Number(srno) ) {\n          setSurahno(parseInt(srno))\n        }\n        else if(srno === ''){\n          setSurahno(srno)\n        }\n        else{\n          return \n        }\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    if(surahno>=1 && surahno<=114){\n      setAppear((appear) => !appear)\n    }\n  }\n\n  return (\n    <div >\n      {appear?\n      <div className=\"container justify-content-center p-5 my-5 bg-dark text-white\">\n      <h1 className=\"h1\">Quran App</h1>\n        <form onSubmit={handleSubmit}>\n          <div className=\"mb-3\">\n            <label className=\"form-label\">\n              Surah No:</label>\n              <input className=\"form-control\" type=\"tel\" placeholder='Surah No (1-114)' value={surahno} onChange={handleChange} />\n            \n            \n          </div>\n          <button type=\"submit\" onClick={handleSubmit} className=\"btn btn-primary\">Submit</button>\n        </form>\n      </div>\n      :\n      <div>\n        <Surah surahNo={surahno} setSurahNo={setSurahno} handleSubmit={handleSubmit}/>\n      </div>\n      }\n\n\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}